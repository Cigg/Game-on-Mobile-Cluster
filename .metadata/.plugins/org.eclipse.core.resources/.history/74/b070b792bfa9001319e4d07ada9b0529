package com.pussycat.minions;

import java.util.ArrayList;

import android.graphics.PointF;
import android.os.AsyncTask;
import android.os.Looper;
import android.util.Log;

public class BackgroundHandler {
	
	ArrayList<Ball> balls = new ArrayList<Ball>();
	int screenWidth;
	int screenHeight;
	float ppi;
	float backgroundInPixels;
	TCPClient tcpClient = null;
	String data;
	
	public BallHandler(float ballDiameterInCentimeters){		
		screenWidth = PussycatMinions.getScreenWidth();
		screenHeight = PussycatMinions.getScreenHeight();
		ppi = PussycatMinions.getPpi();
		ballDiameterInPixels = ppi*(ballDiameterInCentimeters*0.3937f);
		
		balls = new ArrayList<Ball>();
		
		//Looper.prepare();
		new connectTask().execute("");
		Log.d("Debug Pussycat", "ADDING CONNECTION");
	}
	
	/**
	 * Update function.
	 */
	public void update(){
		getDataFromServer();
	}
	
	public void getDataFromServer(){
		if(tcpClient != null){
			tcpClient.getData();
			balls.clear();
			balls.add(new Ball(screenWidth/2, screenHeight/2, 1.5f));
			if(data != "" && data != null) {
				System.out.println(data);
				String[] lines = data.split(" n ");
				for(int i=0; i<lines.length; i++) {
					String[] parts = lines[i].split(" ");
					if(parts.length>1) {
						int id = Integer.parseInt(parts[0]);
						float x = Float.parseFloat(parts[1]);
						float y = Float.parseFloat(parts[2]);
						this.addBall(x,y,1.5f);
					}
				}
			}
		}
	}

	/**
	 * 
	 * @param x
	 * @param y
	 * @param ballDiameterInCentimeters
	 */
	public void addBall(float x, float y, float ballDiameterInCentimeters){
		float ballDiameterInPixels = ppi*(ballDiameterInCentimeters*0.3937f);
		balls.add(new Ball(x, y, ballDiameterInPixels));
	}
	
	/**
	 * 
	 * @param x
	 * @param y
	 * @param ballDiameterInCentimeters
	 * @param speedX
	 * @param speedY
	 */
	public void addBall(float x, float y, float ballDiameterInCentimeters, float speedX, float speedY){
		float ballDiameterInPixels = ppi*(ballDiameterInCentimeters*0.3937f);
		balls.add(new Ball(x, y, ballDiameterInPixels, speedX, speedY));
	}
	
	/**
	 * 
	 * @param index
	 * @param x
	 * @param y
	 * @param ballDiameterInCentimeters
	 */
	public void addBall(int index, float x, float y, float ballDiameterInCentimeters) {
		balls.add(index,new Ball(x,y,ballDiameterInCentimeters));
	}
	
	/**
	 * 
	 * @param index
	 * @param x
	 * @param y
	 */
	public void updateBallPos(int index, float x, float y) {
		balls.get(index).setX(x);
		balls.get(index).setY(y);
	}

	/**
	 * 
	 * @param index
	 */
	public void removeBall(int index){
		balls.remove(index);
		Log.d("Debug Pussycat", "ball removed");
	}
	
	
	public class connectTask extends AsyncTask<String,String,TCPClient> {
		@Override
		protected TCPClient doInBackground(String... message) {
			tcpClient = new TCPClient(new TCPClient.OnMessageReceived() {
				@Override
				public void messageReceived(String message) {
					// TODO Auto-generated method stub
					publishProgress(message);
				}
			});
			tcpClient.run();
			return null;
		}
		
		@Override
		protected void onProgressUpdate(String... values) {
			super.onProgressUpdate(values);
			data = values[0];
			//System.out.println("Data is: " + data);
		}
	}
	
	public TCPClient getTCPClient() {
		return tcpClient;
	}
	
	public String getData() {
		return data;
	}
}